FSM

module consec(z,clk,rst,in);
input clk,rst,in;
output reg z;
//reg [3:0]cs,ns;

(* fsm_encoding = "gray" *) reg [3:0] cs,ns;
always@(posedge clk) begin
if (rst) begin
cs <= 4'b0000;
end else begin
cs <= ns;
end
end

always@(*) begin
case(cs)

4'b0000:
begin
z=0;
if(in==0)
ns=4'b0101;
else 
ns=4'b0001;
end

4'b0001:
begin
z=0;
if(in==0)
ns=4'b0101;
else
ns=4'b0010;
end

4'b0010:
begin
z=0;
if(in==0)
ns=4'b0101;
else
ns=4'b0011;
end

4'b0011:
begin
z=0;
if(in==0)
ns=4'b0101;
else 
ns=4'b0100;
end

4'b0100:
begin 
z=1;
if(in==0)
ns=4'b0101;
else begin 
ns=4'b0100;
end
end

4'b0101:
begin
z=0; 
if(in==0)
ns=4'b0110;
else 
ns=4'b0001;
end

4'b0110:
begin
z=0; 
if(in==0)
ns=4'b0111;
else 
ns=4'b0001;
end

4'b0111:
begin
z=0;
if(in==0)
ns=4'b1000;
else 
ns=4'b0001;
end

4'b1000:
begin
z=1;
if(in==0)begin
ns=4'b1000;
end
else
ns=4'b0001;
end

default:
begin
z=0;
ns=0;
end

endcase
end

endmodule


CLOCK DIVIDER


module Clock_divider(clock_in,clock_out
    );
input clock_in; // input clock on FPGA
output reg clock_out; // output clock after dividing the input clock by divisor
reg[27:0] counter=28'd0;
parameter DIVISOR = 28'd4;

always @(posedge clock_in)
begin
 counter <= counter + 28'd1;
 if(counter>=(DIVISOR-1))
  counter <= 28'd0;
 clock_out <= (counter<DIVISOR/2)?1'b1:1'b0; // This makes clock_out a square wave with a period of DIVISOR input clock cycles â€” the frequency is divided by DIVISOR.
end
endmodule


PIPELINING

`timescale 1ns / 1ps

module HA(sum, carry, a, b);
    output sum, carry;
    input a, b;
    assign sum = a ^ b;
    assign carry = a & b;
endmodule

module FA(sum, carry, a, b, cin);
    output sum, carry;
    input a, b, cin;
    assign sum = a ^ b ^ cin;
    assign carry = (a & b) | (a & cin) | (b & cin);
endmodule

module multiply6x6(
    input clk,
    input [5:0] A, B,
    output reg [11:0] product
);

    wire [5:0] pp[5:0];

    genvar i, j;
    generate
        for (i = 0; i < 6; i = i + 1) begin
            for (j = 0; j < 6; j = j + 1) begin
                assign pp[i][j] = A[j] & B[i];
            end
        end
    endgenerate

    // === Pipeline Stage 1 ===
    wire p1_1, c1, s1, c2, s2, c3, s3, c4, s4, c5, s5, c6;
    always @(posedge clk) begin
        product[0] <= pp[0][0]; // product[0] can be latched early
    end

    HA HA1(p1_1, c1, pp[0][1], pp[1][0]);
    FA FA1(s1, c2, pp[0][2], pp[1][1], pp[2][0]);
    FA FA2(s2, c3, pp[0][3], pp[1][2], pp[2][1]);
    FA FA3(s3, c4, pp[0][4], pp[1][3], pp[2][2]);
    FA FA4(s4, c5, pp[0][5], pp[1][4], pp[2][3]);
    HA HA2(s5, c6, pp[1][5], pp[2][4]);

    // Registers between Stage 1 and 2
    reg r_p1_1, r_c1, r_s1, r_c2, r_s2, r_c3, r_s3, r_c4, r_s4, r_c5, r_s5, r_c6;
    always @(posedge clk) begin
        product[1] <= p1_1;
        r_c1 <= c1; r_s1 <= s1; r_c2 <= c2;
        r_s2 <= s2; r_c3 <= c3; r_s3 <= s3; r_c4 <= c4;
        r_s4 <= s4; r_c5 <= c5; r_s5 <= s5; r_c6 <= c6;
    end

    // === Pipeline Stage 2 ===
    wire s6, c7, s7, c8, s8, c9, s9, c10, s10, c11, s11, c12;
    FA FA5(s6, c7, r_s1, pp[3][0], r_c1);
    FA FA6(s7, c8, r_s2, pp[3][1], r_c2);
    FA FA7(s8, c9, r_s3, pp[3][2], r_c3);
    FA FA8(s9, c10, r_s4, pp[3][3], r_c4);
    FA FA9(s10, c11, r_s5, pp[3][4], r_c5);
    HA HA3(s11, c12, pp[3][5], r_c6);

    // Registers between Stage 2 and 3
    reg r_s6, r_c7, r_s7, r_c8, r_s8, r_c9, r_s9, r_c10, r_s10, r_c11, r_s11, r_c12;
    always @(posedge clk) begin
        r_s6 <= s6; r_c7 <= c7;
        r_s7 <= s7; r_c8 <= c8;
        r_s8 <= s8; r_c9 <= c9;
        r_s9 <= s9; r_c10 <= c10;
        r_s10 <= s10; r_c11 <= c11;
        r_s11 <= s11; r_c12 <= c12;
    end

    // === Pipeline Stage 3 ===
    wire s12, c13, s13, c14, s14, c15, s15, c16, s16, c17, s17, p10;
    FA FA10(s12, c13, r_s6, pp[4][0], r_c7);
    FA FA11(s13, c14, r_s7, pp[4][1], r_c8);
    FA FA12(s14, c15, r_s8, pp[4][2], r_c9);
    FA FA13(s15, c16, r_s9, pp[4][3], r_c10);
    FA FA14(s16, c17, r_s10, pp[4][4], r_c11);
    HA HA4(s17, p10, pp[4][5], r_c12);

    // Final Register Stage
    always @(posedge clk) begin
        product[2] <= r_s6;
        product[3] <= s12;
        product[4] <= s13;
        product[5] <= s14;
        product[6] <= s15;
        product[7] <= s16;
        product[8] <= s17;
        product[9] <= c17;
        product[10] <= p10;
        product[11] <= 0;
    end

endmodule

`timescale 1ns / 1ps

module multiplier_CSR_6x6_tb();

    // Inputs
    reg [5:0] A;
    reg [5:0] B;
    reg clk;
    reg reset;

    // Output
    wire [11:0] product;

    // Instantiate the pipelined multiplier module
    multiply6x6 uut (
        .clk(clk),
        .reset(reset),
        .A(A),
        .B(B),
        .product(product)
    );

    // Clock generation
    always #5 clk = ~clk;

    // Apply inputs
    initial begin
        // Initialize
        clk = 0;
        reset = 1;
        A = 0;
        B = 0;
        #10;
        reset = 0;

        // Apply test cases
        $display("Time  |  A      B      |  Product");
        $display("-----------------------------------");

        A = 6'b000000; B = 6'b000000; #10;
        A = 6'b000101; B = 6'b000011; #10;
        A = 6'b001001; B = 6'b000110; #10;
        A = 6'b001111; B = 6'b001111; #10;
        A = 6'b011001; B = 6'b010011; #10;
        A = 6'b111111; B = 6'b111111; #10;

        // Wait for last pipeline stage to flush
        #50;
        $finish;
    end

    // Monitor output
    initial begin
        $monitor("%0t    |  %b  %b  |  %b", $time, A, B, product);
    end
endmodule

module multiply4bits(
    input clk,
    input [3:0] inp1,
    input [3:0] inp2,
    output reg [7:0] product
);

    // Internal wire to compute full result combinationally
    wire [7:0] result_wire;

    // Partial product for the LSB of the product
    assign result_wire[0] = inp1[0] & inp2[0];

    // Intermediate wires
    wire x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17;

    // First stage of addition
    HA HA1(result_wire[1], x1, (inp1[1] & inp2[0]), (inp1[0] & inp2[1]));
    FA FA1(x2, x3, (inp1[1] & inp2[1]), (inp1[0] & inp2[2]), x1);
    FA FA2(x4, x5, (inp1[1] & inp2[2]), (inp1[0] & inp2[3]), x3);
    HA HA2(x6, x7, (inp1[1] & inp2[3]), x5);

    // Second stage of addition
    HA HA3(result_wire[2], x15, x2, (inp1[2] & inp2[0]));
    FA FA5(x14, x16, x4, (inp1[2] & inp2[1]), x15);
    FA FA4(x13, x17, x6, (inp1[2] & inp2[2]), x16);
    FA FA3(x9, x8, x7, (inp1[2] & inp2[3]), x17);

    // Final stage of addition
    HA HA4(result_wire[3], x12, x14, (inp1[3] & inp2[0]));
    FA FA8(result_wire[4], x11, x13, (inp1[3] & inp2[1]), x12);
    FA FA7(result_wire[5], x10, x9, (inp1[3] & inp2[2]), x11);
    FA FA6(result_wire[6], result_wire[7], x8, (inp1[3] & inp2[3]), x10);

    // Register output (simple pipeline stage)
    always @(posedge clk) begin
        product <= result_wire;
    end
endmodule


`timescale 1ns / 1ps

module multiply4bits_tb;

    // Inputs
    reg clk;
    reg [3:0] inp1, inp2;

    // Output
    wire [7:0] product;

    // Instantiate the Unit Under Test (UUT)
    multiply4bits uut (
        .clk(clk),
        .inp1(inp1),
        .inp2(inp2),
        .product(product)
    );

    // Clock generator
    always #5 clk = ~clk; // 100 MHz clock

    initial begin
        // Initialize inputs
        clk = 0;
        inp1 = 0;
        inp2 = 0;

        // Apply test cases
        #10 inp1 = 4'b0011; inp2 = 4'b0010; // 3 * 2 = 6
        #10 inp1 = 4'b0101; inp2 = 4'b0100; // 5 * 4 = 20
        #10 inp1 = 4'b1111; inp2 = 4'b1111; // 15 * 15 = 225
        #10 inp1 = 4'b0001; inp2 = 4'b1010; // 1 * 10 = 10
        #10 inp1 = 4'b0000; inp2 = 4'b1111; // 0 * 15 = 0

        // Wait for outputs to propagate through the pipeline
        #50 $finish;
    end

    // Monitor values
    initial begin
        $display("Time\tinp1\tinp2\tproduct");
        $monitor("%0dns\t%b\t%b\t%h", $time, inp1, inp2, product);
    end
endmodule


UP DOWN COUNTER

module zero_99( 
input clock, 
input reset, 
output a, 
output b, 
output c, 
output d, 
output e, 
output f, 
output g, 
output dp, 
output [7:0]an,
input up, down
); 
reg [3:0]first; //register for the first digit 
reg [3:0]second; //register for the second digit 
reg [24:0] delay; //register to produce the 0.1 second delay 
//wire test; 
always @ (posedge clock or posedge reset) 
begin 
if (reset) 
delay <= 0; 
else 
delay <= delay + 1; 
end 

reg up_reg, down_reg;
always @ (posedge clock)
begin
    up_reg <= up;
    down_reg <= down;
end
wire up_enable, down_enable;
assign up_enable = (up_reg == 0 && up == 1) ? 1 : 0;
assign down_enable = (down_reg == 0 && down == 1) ? 1 : 0;
always @ (posedge clock or posedge reset) 
begin 
if (reset) begin 
first <= 0; 
second <= 0; 
end
else if (up_enable) begin 
if (first==4'd9) begin  //x9 reached 
first <= 0; 
if (second == 4'd9) //99 reached 
second <= 0; 
else 
second <= second + 1; 
end 
else 
first <= first + 1; 
end
else if (down_enable) begin 
if (first==4'd0) begin  //x9 reached 
first <= 9; 
if (second == 4'd0) //99 reached 
second <= 9; 
else 
second <= second - 1; 
end 
else 
first <= first - 1; 
end
else begin
second <= second;
 first <= first;
 end 
end

//Multiplexing circuit below 
localparam N = 18; 
reg [N-1:0]count; 
always @ (posedge clock or posedge reset) 
begin 
if (reset) 
count <= 0; 
else 
count <= count + 1; 
end 
reg [6:0]sseg; 
reg [7:0]an_temp; 
always @ (*) 
begin 
case(count[N-1:N-2]) 

   2'b00 :  
    begin 
     sseg = first; 
     an_temp = 8'b11111110; 
    end 
    
   2'b01: 
    begin 
     sseg = second; 
     an_temp = 8'b11111101; 
    end 
    
   2'b10: 
    begin 
     sseg = 6'ha; //unknown sent to produce '-' 
     an_temp = 8'b11111011; 
    end 
     
   2'b11: 
    begin 
     sseg = 6'ha; //unknown sent to produce '-' 
     an_temp = 8'b11110111; 
    end 
  endcase 
 end 
assign an = an_temp; 
 
reg [6:0] sseg_temp;  
always @ (*) 
 begin 
case(sseg) 
4'd0 : sseg_temp = 7'b1000000; //0 
4'd1 : sseg_temp = 7'b1111001; //1 
4'd2 : sseg_temp = 7'b0100100; //2 
4'd3 : sseg_temp = 7'b0110000; //3 
4'd4 : sseg_temp = 7'b0011001; //4 
4'd5 : sseg_temp = 7'b0010010; //5 
4'd6 : sseg_temp = 7'b0000010; //6 
4'd7 : sseg_temp = 7'b1111000; //7 
4'd8 : sseg_temp = 7'b0000000; //8 
4'd9 : sseg_temp = 7'b0010000; //9 
default : sseg_temp = 7'b0111111; //dash 
endcase 
end 
assign {g, f, e, d, c, b, a} = sseg_temp;  
assign dp = 1'b1; //we dont need the decimal here so turn all of them off
endmodule


CLOCK 

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 03/05/2025 03:20:31 PM
// Design Name: 
// Module Name: clock_2
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module clock_2(
    input clk,                // Main clock signal
    input reset,              // Reset signal
    output reg [6:0] ssd,     // Seven-segment display output
    output reg [7:0] anode    // Anode output for multiplexing
);

    reg [25:0] count;         // Counter for generating 1Hz clock
    reg clk_1hz;              // 1Hz clock signal
    reg [3:0] sec_lss;        // Least significant second digit
    reg [3:0] sec_mss;        // Most significant second digit
    reg [3:0] min_lss;        // Least significant minute digit
    reg [3:0] min_mss;        // Most significant minute digit
    reg [3:0] hr_lss;         // Least significant hour digit
    reg [3:0] hr_mss;         // Most significant hour digit
    reg [19:0] seg_count;     // Counter for segment multiplexing
    reg [3:0] number;         // Digit to be displayed

    // Generate 1Hz clock from 100MHz clock
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            count <= 0;
            clk_1hz <= 0;
        end else if (count == 50_000_000) begin
            clk_1hz <= ~clk_1hz;
            count <= 0;
        end else begin
            count <= count + 1;
        end
    end

    // Clock logic for seconds, minutes, and hours
    always @(posedge clk_1hz or posedge reset) begin
        if (reset) begin
            sec_lss <= 0;
            sec_mss <= 0;
            min_lss <= 0;
            min_mss <= 0;
            hr_lss <= 0;
            hr_mss <= 0;
        end else begin
            if (sec_lss == 9) begin
                sec_lss <= 0;
                if (sec_mss == 5) begin
                    sec_mss <= 0;
                    if (min_lss == 9) begin
                        min_lss <= 0;
                        if (min_mss == 5) begin
                            min_mss <= 0;
                            if (hr_lss == 3 && hr_mss == 2) begin
                                hr_lss <= 0;
                                hr_mss <= 0;
                            end else if (hr_lss == 9) begin
                                hr_lss <= 0;
                                hr_mss <= hr_mss + 1;
                            end else begin
                                hr_lss <= hr_lss + 1;
                            end
                        end else begin
                            min_mss <= min_mss + 1;
                        end
                    end else begin
                        min_lss <= min_lss + 1;
                    end
                end else begin
                    sec_mss <= sec_mss + 1;
                end
            end else begin
                sec_lss <= sec_lss + 1;
            end
        end
    end

    // Multiplexing logic for seven-segment display
    always @(posedge clk) begin
        seg_count <= seg_count + 1;
    end

    always @(*) begin
        case (seg_count[19:17])
            3'd0: begin
                number = sec_lss;  // Display least significant second digit
                anode = 8'b11111110;
            end
            3'd1: begin
                number = sec_mss;  // Display most significant second digit
                anode = 8'b11111101;
            end
            3'd2: begin
                number = min_lss;  // Display least significant minute digit
                anode = 8'b11111011;
            end
            3'd3: begin
                number = min_mss;  // Display most significant minute digit
                anode = 8'b11110111;
            end
            3'd4: begin
                number = hr_lss;   // Display least significant hour digit
                anode = 8'b11101111;
            end
            3'd5: begin
                number = hr_mss;   // Display most significant hour digit
                anode = 8'b11011111;
            end
            default: begin
                number = 4'b1111;  // Turn off all segments
                anode = 8'b11111111;
            end
        endcase
    end

    // Seven-segment display encoding
    always @(*) begin
        case (number)
            4'd0: ssd = 7'b1000000; // 0
            4'd1: ssd = 7'b1111001; // 1
            4'd2: ssd = 7'b0100100; // 2
            4'd3: ssd = 7'b0110000; // 3
            4'd4: ssd = 7'b0011001; // 4
            4'd5: ssd = 7'b0010010; // 5
            4'd6: ssd = 7'b0000010; // 6
            4'd7: ssd = 7'b1111000; // 7
            4'd8: ssd = 7'b0000000; // 8
            4'd9: ssd = 7'b0010000; // 9
            default: ssd = 7'b1111111; // Turn off all segments
        endcase
    end

endmodule

